/*!

@mainpage %Shotgun API

@section toc Table of Contents
<ul>
  <li>@ref Introduction</li>
  <li>@ref Installation</li>
  <li>@ref Notes</li>
  <li>@ref details</li>
  <ul>
    <li>@ref connecting</li>
    <li>@ref finding</li>
    <li>@ref modifying</li>
    <li>@ref batch</li>
    <li>@ref schema</li>
    <li>@ref files</li>
    <li>@ref requests</li>
  </ul>
  <li>@ref TODOs</li>
  <li>@ref Dependencies</li>
  <li>@ref Links</li>
</ul>

@section Introduction
This is an objective c port of the python shotgun api.

For complete documentation of how the Python %Shotgun API works along with
tutorials, examples, and other details see:\n
https://github.com/shotgunsoftware/python-api/wiki

@section Installation
 <ul>
 <li>Start by downloading the code from https://github.com/shotgunsoftware/objc-api</li>
 <li>Copy the files in Classes directory into your project.</li>
 <li>Copy the dependencies into your project.\n\n
     All the dependencies are included as git submodules in the Dependencies directory.\n
     You can either download the dependencies yourself or (if you cloned the project via\n
     git rather than downloading the tarball) run 'git submodule init' followed by\n
     'git submodule update' to download the projects at the revision as of the writing of\n
     this library.\n\n
   <ul>
     <li><b>json-framework</b> - Copy the files in Classes into your project.</li>
     <li><b>asi-http-request</b> (<i>See the <a href="http://allseeing-i.com/ASIHTTPRequest/Setup-instructions">official docs</a> for more in depth instructions).</i>
       <ul>
         <li>Copy the files in Classes into your project (just the files, the directories are not needed)</li>
         <li>Copy the files in External/Reachability into your project.</li>
         <li>Link against CFNetwork, SystemConfiguration, MobileCoreServices, CoreGraphics and zlib</li>
       </ul>
     </li>
   </ul>
 </li>
 </ul>
 Note, it is also possible to compile this as a library and link that into your project as a sub-project.  This is cleaner, but more difficult to setup.
 See the example project under Examples to see what this setup would look like.
 \li To get the example project or unit tests to run you need to copy the Config.plist.template
 file to Config.plist and update the values for your shotgun server.

@section Notes
 \li All Date objects are assumed to be in UTC (This is the default NSDate behavior).
 \li The default NSOperationQueue for ShotgunRequests will run up to 4 requests concurrently.

@section details API Details
  @subsection connecting Connecting to Shotgun
  \code
  NSString *url = @"http://mysite.shotgunsoftware.com";
  NSString *script = @"example_script";
  NSString *key = @"abcdefghijklmnopqrstuvwxyz";
  Shotgun *shotgun = [[[Shotgun alloc] initWithUrl:url scriptName:script andKey:key] autorelease];
  \endcode

  @subsection finding Finding entities
  \code
  ShotgunRequest *request = 
    [shotgun findEntitiesOfType:@"Version"
                    withFilters:@"[[\"code\", \"starts_with\", \"100\"]]"
                      andFields:@"[\"code\", \"image\"]"];
  [request startSynchronous];
  NSArray *results = [request response];
  \endcode

  @subsection modifying Creating, modifying, deleting, and reviving entities
  \code
  ShotgunEntity *shot = [[shotgun createEntityOfType:@"Shot"
                withData:@"{\"code\": \"s10\", \"description\": \"Shot 10\"}"] startSynchronous];
  \endcode
  \code
  ShotgunRequest *request = [shotgun updateEntityOfType:@"Shot"
                                            withId:[NSNumber numberWithInt:23]
                                          withData:@"{\"description\": \"Shot 20 - More Info\"}"];
  ShotgunEntity *shot = [request startSynchronous];
  \endcode
  \code
  ShotgunRequest *request = [shotgun deleteEntityOfType:@"Shot" withId:[NSNumber numberWithInt:23]];
  [request startSynchronous];
  BOOL success = [[request response] boolValue];
  \endcode
  \code
  ShotgunRequest *request = [shotgun reviveEntityOfType:@"Shot" withId:[NSNumber numberWithInt:23]];
  [request startSynchronous];
  BOOL success = [[request response] boolValue];
  \endcode

  @subsection batch Batch operations
  \code
  ShotgunRequest *request = [shotgun batch:@"[" \
      "{                                 " \
      " \"request_type\": \"create\",    " \
      " \"entity_type\":  \"Shot\",      " \
      " \"data\": {                      " \
      "     \"code\": \"s10\",           " \
      "     \"description\": \"Shot 10\" " \
      "   }                              " \
      "},                                " \
      "{\"request_type\": \"delete\", \"entity_type\": \"Shot\", \"entity_id\": 23}" \
    ]"];
  [request startSynchronous];
  NSArray *results = [request response];
  \endcode

  @subsection schema Meta-Schema queries
  \code
  ShotgunRequest *request = [shotgun schemaEntityRead];
  [request startSynchronous];
  NSDictionary *schemaInfo = [request response];
  \endcode
  \code
  ShotgunRequest *request = [shotgun schemaRead];
  [request startSynchronous];
  NSDictionary *schema = [request response];
  \endcode
  \code
  ShotgunRequest *request = [shotgun schemaFieldReadForEntityOfType:@"Shot" forField:@"sg_status_list"];
  [request startSynchronous];
  NSDictionary *entitySchema = [request response];
  \endcode

  @subsection files Uploading and downloading files
  \code
  NSNumber *attachmentId = [shotgun uploadThumbnailForEntityOfType:@"Shot"
                                         withId:[NSNumber numberWithInt:23]
                                       fromPath:@"/path/to/the/file.jpg"];
  \endcode
  \code
  NSData *imageData = downloadAttachmentWithId:[NSNumber numberWithInt:201];
  \endcode
  \code
  ShotgunEntity *entity = [[shotgun findEntityOfType:@"Version"
                                         withFilters:filters
                                           andFields:fields] startSynchronous];
  [shotgun thumbnailForEntity:entity withBlock:^(UIImage *thumbnail) {
        NSString *aURL = [shot objectForKey:@"image"];
        NSLog(@"URL: %@ is %dx%d", aURL, thumbnail.size.width, thumbnail.size.height);
  }];
  \endcode

  @subsection requests Using ShotgunRequest Objects
  ShotgunRequests can be run either synchronously or asynchronously.

  To run a request syncronously simply call startSyncronously:
  \code
  [request startSyncronous];
  \endcode
  The request will block the current thread until it is finished and its response is ready.

  To run a request asynchronously call startAsynchronous:
  \code
  [request startAsynchronous];
  \endcode
  Control will return to the current thread right away.  To process the response to the
  request, register callback blocks with request before starting it:
  \code
  [request setCompletionBlock:^{
     id response = [request response];
     // Do Stuff with the response
  }];
  \endcode

  The currently supported callbacks are:
  \li startedBlock - Called when the request is started.
  \li completionBlock - Called when the request has finished.
  \li failedBlock - Called when the request failed.

  The postProcessBlock is used internally to the API and should not be overridden.

  @subsection shotgunEntities ShotgunEntities
  Any dictionary returned by a create, update, or find call is a ShotgunEntity object which adds
  some shotgun specific logic on top of an NSMutableDictionary.
  \code
  ShotgunEntity *entity = [request response];
  NSLog(@"My entity type is %@ , my entity id is %@", entity.entityType, entity.entityId);
  \endcode

  @subsection dates Dates
  All dates handled by the API are UTC dates (the default timezone for NSDate objects).\n
  date_time fields in shotgun are returned as ShotgunDateTime objects.  date fields in shotgun
  are returned as strings ("YYYY-MM-DD") like in the Python API.\n
  When passing dates into the API, NSDate objects are not allowed, you must use ShotgunDate or ShotgunDateTime objects.

@section Dependencies
 \li ASIHTTPRequest: http://allseeing-i.com/ASIHTTPRequest/
 \li SBJson: http://stig.github.com/json-framework/
 \li GHUnit (only needed to run the unit tests): https://github.com/gabriel/gh-unit

@section Links
\li Python API: https://github.com/shotgunsoftware/python-api
\li Mailing List: https://groups.google.com/group/shotgun-objc-api
\li Issues: https://github.com/shotgunsoftware/objc-api/issues

@section TODOs
@li Switch from Exceptions to NSErrors
@li Add support for responding to events via delegate SELs
@li Add support for asychronous image field resolution
@li Better API around paging
@li Finish documentation
@li Round out unit tets.  Use <a href="http://www.mulle-kybernetik.com/software/OCMock/">OCMock</a>.
@li Switch to a decent logging system
@li \ref todo "Other inline TODOs"

Rob Blau <rblau@laika.com>

*/
